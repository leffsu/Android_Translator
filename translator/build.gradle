apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def publishVersionID = '0.2.1'

publishing {

    def groupProjectID = 'su.leff.translator'
    def artifactProjectID = 'translator'

    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/translator-release.aar")
            groupId = groupProjectID
            artifactId = artifactProjectID
            version = publishVersionID

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                //def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }

        /*Sandbox(MavenPublication) {
            artifact("$buildDir/outputs/aar/droidils-development-release.aar")
            groupId 'com.aptus'
            artifactId 'droidils'
            version '1.0.3-SANDBOX'

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }*/
    }
}

bintray {
    // Get Bintray credential from environment variable
    user = System.getenv('BINTRAY_USER') // Get bintray User
    key = System.getenv('BINTRAY_API_KEY') // Get bintray Secret Key

    //configurations = ['archives']
    dryRun = false
    override = false
    publish = true

    pkg {
        userOrg = 'leffsu'
        repo = 'translator'
        name = 'translator'
        licenses = ['Apache-2.0']
        desc = 'Android library easily handle change of translations'
        websiteUrl = 'https://github.com/leffsu/Android_Translator'
        issueTrackerUrl = 'https://github.com/leffsu/Android_Translator/issues'
        vcsUrl = 'https://github.com/leffsu/Android_Translator.git'

        version {
            name = publishVersionID //Bintray logical version name
            vcsTag = publishVersionID
        }
    }

    publications = ['Production']
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'


}